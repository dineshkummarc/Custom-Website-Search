using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using Searcharoo.Common;
using Mono.GetOptions;
#region Mono.GetOptions attributes to drive command line argument parsing
// Instructions to 'set up' Mono.GetOptions
// http://www.talios.com/command_line_processing_with_monogetoptions.htm

// Attributes visible in " -V"
[assembly: Mono.About("Searcharoo Indexer (Spider)")]
[assembly: Mono.Author("Craig.Dunn (at) ConceptDevelopment.net")]
[assembly: Mono.AdditionalInfo("Searcharoo.Indexer.exe spiders and catalogs data for the Searcharoo.Engine")]

// This is text that goes after " [options]" in help output - there is none for this program
[assembly: Mono.UsageComplement("")]

// Attributes visible in " --help"
// are defined in AssemblyInfo.cs (not here)
#endregion

namespace Searcharoo.Indexer
{
    class Program
    {
        private static CommandLinePreferences clip;

        static void Main(string[] args)
        {
            clip = new CommandLinePreferences();
            

            ConsoleWriteLine(1, "Searcharoo.Indexer v0.1");

            clip.ProcessArgs(args);

            ConsoleWriteLine(1, "=======================");
            Spider spider = new Spider();

            spider.SpiderProgressEvent += new SpiderProgressEventHandler(OnProgressEvent);
            spider.SpiderProgressEvent += new SpiderProgressEventHandler(OnProgressLogEvent);

            Catalog catalog = spider.BuildCatalog(new Uri(Preferences.StartPage));

            ConsoleWriteLine(1, "=======================");
#if DEBUG
            //System.Threading.Thread.Sleep(30 * 1000);    // 30 seconds
            ConsoleWriteLine(1, "Press <enter> to finish...");
            if (clip.Verbosity > 0) Console.Read();
#endif            
        }

        private static void ConsoleWriteLine(int level, string text)
        {
            if (level <= clip.Verbosity)
            {
                Console.WriteLine(text);
            }
        }

        /// <summary>
        /// Handle events generated by the Spider (mostly reporting on success/fail of page load/index)
        /// </summary>
        public static void OnProgressEvent(object source, ProgressEventArgs pea)
        {
            if (pea.Level <= clip.Verbosity)
            {
                Console.WriteLine(">{0} :: {1}", pea.Level, pea.Message);
            }
            
        }

        /// <summary>
        /// Log to disk events generated by the Spider (mostly reporting on success/fail of page load/index)
        /// </summary>
        public static void OnProgressLogEvent(object source, ProgressEventArgs pea)
        {
            //if (pea.Level < 3)
            //{
            //    Console.WriteLine(pea.Message + "<br>");
            //}
        }
    }
}
